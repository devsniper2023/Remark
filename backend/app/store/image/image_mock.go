// Automatically generated by MockGen. DO NOT EDIT!
// Source: image.go

package image

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	time "time"
)

// Mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *_MockStoreRecorder
}

// Recorder for MockStore (not exported)
type _MockStoreRecorder struct {
	mock *MockStore
}

func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &_MockStoreRecorder{mock}
	return mock
}

func (_m *MockStore) EXPECT() *_MockStoreRecorder {
	return _m.recorder
}

func (_m *MockStore) Save(fileName string, userID string, r io.Reader) (string, error) {
	ret := _m.ctrl.Call(_m, "Save", fileName, userID, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save", arg0, arg1, arg2)
}

func (_m *MockStore) Commit(id string) error {
	ret := _m.ctrl.Call(_m, "Commit", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) Commit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit", arg0)
}

func (_m *MockStore) Load(id string) (io.ReadCloser, int64, error) {
	ret := _m.ctrl.Call(_m, "Load", id)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockStoreRecorder) Load(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Load", arg0)
}

func (_m *MockStore) Cleanup(ctx context.Context, ttl time.Duration) error {
	ret := _m.ctrl.Call(_m, "Cleanup", ctx, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) Cleanup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cleanup", arg0, arg1)
}

func (_m *MockStore) SizeLimit() int {
	ret := _m.ctrl.Call(_m, "SizeLimit")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockStoreRecorder) SizeLimit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SizeLimit")
}
